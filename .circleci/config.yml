# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# Adopted from
# https://github.com/facebookresearch/detectron2/blob/master/.circleci/config.yml

version: 2

# -------------------------------------------------------------------------------------
# Environments to run the jobs in
# -------------------------------------------------------------------------------------
cpu: &cpu
  docker:
    - image: circleci/python:3.7
  resource_class: medium

gpu: &gpu
  environment:
    CUDA_VERSION: "10.2"
  machine:
    image: ubuntu-1604:201903-01
  resource_class: gpu.medium

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
setup_venv: &setup_venv
  - run:
      name: Setup Virtual Env
      working_directory: ~/
      command: |
        python -m venv ~/venv
        echo ". ~/venv/bin/activate" >> $BASH_ENV
        . ~/venv/bin/activate
        python --version
        which python
        which pip
        pip install --upgrade pip

install_dep: &install_dep
  - run:
      name: Install Dependencies
      command: |
        pip install --progress-bar off -r requirements.txt
        pip install --progress-bar off flake8
        pip install --progress-bar off black
        pip install --progress-bar off isort
        pip install --progress-bar off pytest
        python -c 'import torch; print("Torch version:", torch.__version__)'
        python -m torch.utils.collect_env

install_repo: &install_repo
  - run:
      name: Install Repository
      command: |
        python setup.py build develop

run_unittests: &run_unittests
  - run:
      name: Run Unit Tests
      command: |
        cd tests
        pytest --junitxml=test-results/junit.xml -v .

run_flake8: &run_flake8
  - run:
      name: Run Linter (flake8)
      command: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F72,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=18 --max-line-length=88 --statistics

install_nvidia_driver: &install_nvidia_driver
  - run:
      name: Install NVIDIA Driver
      working_directory: ~/
      command: |
        wget -q --no-clobber -P ~/nvidia-downloads 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-430.40.run'
        sudo /bin/bash ~/nvidia-downloads/NVIDIA-Linux-x86_64-430.40.run -s --no-drm
        pyenv versions
        nvidia-smi
        pyenv global 3.7.0

# -------------------------------------------------------------------------------------
# Jobs to run
# -------------------------------------------------------------------------------------

jobs:
  cpu_tests:
    <<: *cpu

    working_directory: ~/mmf

    steps:
      - checkout
      - <<: *setup_venv

      # Cache the venv directory that contains dependencies
      - restore_cache:
          keys:
            - cache-key-cpu-{{ checksum "setup.py"}}-{{ checksum "requirements.txt"}}

      - <<: *install_dep

      - save_cache:
          paths:
            - ~/venv
          key: cache-key-cpu-{{ checksum "setup.py"}}-{{ checksum "requirements.txt"}}

      - <<: *install_repo

      - run:
          name: Run Linter (isort)
          command: |
            isort -c -sp .

      - run:
          name: Run Linter (black)
          command: |
            black --check -l 88 .

      - <<: *run_flake8

      - <<: *run_unittests

      - store_test_results:
          path: test-results

  gpu_tests:
    <<: *gpu

    working_directory: ~/mmf

    steps:
      - checkout

      # Cache the nvidia driver downloads
      - restore_cache:
          key: nvidia-downloads-v4

      - <<: *install_nvidia_driver

      - save_cache:
          key: nvidia-downloads-v4
          paths:
            - "~/nvidia-downloads/"

      - <<: *setup_venv

      # Cache the venv directory that contains dependencies
      - restore_cache:
          keys:
            - cache-key-gpu-{{ checksum "setup.py"}}-{{ checksum "requirements.txt"}}

      - <<: *install_dep

      - save_cache:
          paths:
            - ~/venv
          key: cache-key-gpu-{{ checksum "setup.py"}}-{{ checksum "requirements.txt"}}

      - <<: *install_repo

      - <<: *run_unittests

      - store_test_results:
          path: test-results


workflows:
  version: 2
  build:
    jobs:
      - cpu_tests
      - gpu_tests
